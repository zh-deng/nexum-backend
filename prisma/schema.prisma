generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  username     String
  password     String
  applications Application[]
  companies    Company[]
  createdAt    DateTime      @default(now())
}

enum ApplicationStatus {
  DRAFT
  APPLIED
  INTERVIEW
  OFFER
  HIRED
  DECLINED_OFFER
  REJECTED
  GHOSTED
  WITHDRAWN
}

enum WorkLocation {
  ON_SITE
  REMOTE
  HYBRID
  UNSURE
}

model Application {
  id             String            @id @default(cuid())
  jobTitle       String
  companyId      String
  company        Company           @relation(fields: [companyId], references: [id])
  jobLink        String?
  jobDescription String?
  workLocation   WorkLocation      @default(UNSURE)
  priority       Int               @default(2) // 1=HIGH, 2=MEDIUM, 3=LOW
  notes          String?
  status         ApplicationStatus @default(DRAFT)
  userId         String
  user           User              @relation(fields: [userId], references: [id])
  favorited      Boolean?          @default(false)
  fileUrls       String[]
  logItems       LogItem[]
  reminders      Reminder[]
  interviews     Interview[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([userId])
  @@index([userId, updatedAt])
  @@index([userId, status])
  @@index([userId, priority])
}

enum InterviewStatus {
  UPCOMING
  DONE
}

model Interview {
  id            String          @id @default(cuid())
  date          DateTime?
  notes         String?
  status        InterviewStatus @default(UPCOMING)
  applicationId String
  application   Application     @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Company {
  id           String        @id @default(cuid())
  name         String
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  website      String?
  street       String?
  city         String?
  state        String?
  zipCode      String?
  country      String?
  industry     String?
  companySize  String?
  contactName  String?
  contactEmail String?
  contactPhone String?
  notes        String?
  logoUrl      String?
  applications Application[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([name, userId])
}

// Logs the status changes of applications
model LogItem {
  id            String            @id @default(cuid())
  status        ApplicationStatus
  notes         String?
  date          DateTime?         @default(now())
  applicationId String
  application   Application       @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

enum ReminderStatus {
  ACTIVE
  STOPPED
  DONE
}

// Used to track notifications
model Reminder {
  id            String         @id @default(cuid())
  alarmDate     DateTime
  message       String?
  status        ReminderStatus @default(ACTIVE)
  applicationId String
  application   Application    @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}
